<persistence xmlns="http://java.sun.com/xml/ns/persistence"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd"
    version="1.0">
    
    <!-- 
    
    Here's a quick cheat sheet of the JPA world:
	•	A Cache is a copy of data, copy meaning pulled from but living outside the database.
	•	Flushing a Cache is the act of putting modified data back into the database.
	•	A PersistenceContext is essentially a Cache. It also tends to have it's own non-shared database connection.
	•	An EntityManager represents a PersistenceContext (and therefore a Cache)
	•	An EntityManagerFactory creates an EntityManager (and therefore a PersistenceContext/Cache)
	
	
Comparing RESOURCE_LOCAL and JTA persistence contexts :
	With <persistence-unit transaction-type="RESOURCE_LOCAL"> you are responsible for EntityManager (PersistenceContext/Cache) creating and tracking...
	•	You must use the EntityManagerFactory to get an EntityManager
	•	The resulting EntityManager instance is a PersistenceContext/Cache
	•	An EntityManagerFactory can be injected via the @PersistenceUnit annotation only (not @PersistenceContext)
	•	You are not allowed to use @PersistenceContext to refer to a unit of type RESOURCE_LOCAL
	•	You must use the EntityTransaction API to begin/commit around every call to your EntityManger
	•	Calling entityManagerFactory.createEntityManager() twice results in two separate EntityManager instances and therefor two separate PersistenceContexts/Caches.
	•	It is almost never a good idea to have more than one instance of an EntityManager in use (don't create a second one unless you've destroyed the first)
	With <persistence-unit transaction-type="JTA"> the container will do EntityManager (PersistenceContext/Cache) creating and tracking...
	•	You cannot use the EntityManagerFactory to get an EntityManager
	•	You can only get an EntityManager supplied by the container
	•	An EntityManager can be injected via the @PersistenceContext annotation only (not @PersistenceUnit)
	•	You are not allowed to use @PersistenceUnit to refer to a unit of type JTA
	•	The EntityManager given by the container is a reference to the PersistenceContext/Cache associated with a JTA Transaction.
	•	If no JTA transaction is in progress, the EntityManager cannot be used because there is no PersistenceContext/Cache.
	•	Everyone with an EntityManager reference to the same unit in the same transaction will automatically have a reference to the same PersistenceContext/Cache
	•	The PersistenceContext/Cache is flushed and cleared at JTA commit time
	    
    
    
     -->

   <!--  <persistence-unit name="alertingPU" transaction-type="RESOURCE_LOCAL"> -->
    <persistence-unit name="alertingPU" transaction-type="JTA">
        <provider>org.hibernate.ejb.HibernatePersistence</provider>
     <!-- <non-jta-data-source>java:/MySQLDS</non-jta-data-source>  -->     
      <jta-data-source>java:openejb/Resource/AlertingJtaDS</jta-data-source> 
      <non-jta-data-source>java:openejb/Resource/AlertingNonJtaDS</non-jta-data-source>
			<!-- Necessaire ????????????????????  -->
			<class>com.playtech.interview.model.AlertConfig</class>
			<class>com.playtech.interview.model.EventAction</class>
			<class>com.playtech.interview.model.LogEntry</class>
			<class>com.playtech.interview.EventDetails</class>
			<exclude-unlisted-classes>true</exclude-unlisted-classes>
			

        <properties>
          <!--   
          	<property name="hibernate.transaction.factory_class" value="org.hibernate.transaction.JTATransactionFactory" />
            <property name="hibernate.transaction.manager_lookup_class" value="org.hibernate.transaction.JBossTransactionManagerLookup" />
            <property name="hibernate.dialect" value="org.hibernate.dialect.MySQL5InnoDBDialect" />
            <property name="hibernate.hbm2ddl.auto" value="update" />
            <property name="hibernate.connection.release_mode" value="after_transaction" />
             -->
            
            <!-- <property name="hibernate.connection.datasource" value="java:openejb/Resource/AlertingNonJtaDS"/> -->
            <!-- A ne pas utiliser les deux paramètres suivants  avec Tomee  :  -->
            <!-- <property name="hibernate.transaction.factory_class" value="org.hibernate.transaction.JTATransactionFactory" />
            <property name="hibernate.transaction.manager_lookup_class" value="org.apache.openejb.hibernate.TransactionManagerLookup" /> -->
            
            
            
           <!--  <property name="hibernate.dialect" value="org.hibernate.dialect.MySQLDialect"/> -->
          <!--  <property name="hibernate.dialect" value="org.hibernate.dialect.MySQL5InnoDBDialect" />  -->
           <property name="hibernate.dialect" value="org.hibernate.dialect.MySQL5Dialect"/>
            <property name="hibernate.hbm2ddl.auto" value="validate" />
            <property name="hibernate.connection.release_mode" value="after_transaction" />
            <property name="hibernate.show_sql" value="true" />
            <property name="hibernate.format_sql" value="true" />
            <property name="hibernate.cache.use_second_level_cache" value="false"/>  
            
            
        </properties>
    </persistence-unit>
</persistence>